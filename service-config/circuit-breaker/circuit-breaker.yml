resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 100
      permittedNumberOfCallsInHalfOpenState: 10
      waitDurationInOpenState: 10000
      failureRateThreshold: 60
      eventConsumerBufferSize: 10
      registerHealthIndicator: true
    someShared:
      slidingWindowSize: 50
      permittedNumberOfCallsInHalfOpenState: 10
  instances:
    account:
      baseConfig: default
      slidingWindowSize: 5
      permittedNumberOfCallsInHalfOpenState: 2
      waitDurationInOpenState: 1000
      failureRateThreshold: 30
      eventConsumerBufferSize: 10
      registerHealthIndicator: true
    backendB:
      registerHealthIndicator: true
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 3
      slidingWindowType: TIME_BASED
      minimumNumberOfCalls: 20
      waitDurationInOpenState: 50s
      failureRateThreshold: 50
      eventConsumerBufferSize: 10
#  retry:
#    instances:
#      backendA:
#        maxRetryAttempts: 3
#        waitDuration: 10s
#        enableExponentialBackoff: true
#        exponentialBackoffMultiplier: 2
#        retryExceptions:
#          - org.springframework.web.client.HttpServerErrorException
#          - java.io.IOException
#        ignoreExceptions:
#          - io.github.robwin.exception.BusinessException
#      backendB:
#        maxRetryAttempts: 3
#        waitDuration: 10s
#        retryExceptions:
#          - org.springframework.web.client.HttpServerErrorException
#          - java.io.IOException
#        ignoreExceptions:
#          - io.github.robwin.exception.BusinessException
#  bulkhead:
#    instances:
#      backendA:
#        maxConcurrentCalls: 10
#      backendB:
#        maxWaitDuration: 10ms
#        maxConcurrentCalls: 20
#  thread-pool-bulkhead:
#    instances:
#      backendC:
#        maxThreadPoolSize: 1
#        coreThreadPoolSize: 1
#        queueCapacity: 1
#  ratelimiter:
#    instances:
#      backendA:
#        limitForPeriod: 10
#        limitRefreshPeriod: 1s
#        timeoutDuration: 0
#        registerHealthIndicator: true
#        eventConsumerBufferSize: 100
#      backendB:
#        limitForPeriod: 6
#        limitRefreshPeriod: 500ms
#        timeoutDuration: 3s
#  timelimiter:
#    instances:
#      backendA:
#        timeoutDuration: 2s
#        cancelRunningFuture: true
#      backendB:
#        timeoutDuration: 1s
#        cancelRunningFuture: false